package jpp.gametheory.rockPaperScissors.strategies;

import jpp.gametheory.generic.IGameRound;
import jpp.gametheory.generic.IPlayer;
import jpp.gametheory.generic.IReward;
import jpp.gametheory.generic.IStrategy;
import jpp.gametheory.rockPaperScissors.RPSChoice;

import java.util.List;

public class MostSuccessful implements IStrategy<RPSChoice> {
    private IStrategy<RPSChoice> alternate;
    private IReward<RPSChoice> reward;
    private RPSChoice choice;

    public MostSuccessful(IStrategy<RPSChoice> alternate, IReward<RPSChoice> reward){
        this.alternate = alternate;
        this.reward = reward;
    }

    @Override
    public String name() {
        return "Most Successful Choice (Alternate: " + alternate.name() + ")";
    }

    @Override
    public RPSChoice getChoice(IPlayer<RPSChoice> player, List<IGameRound<RPSChoice>> previousRounds) {
        int max = 0;

        for(IGameRound<RPSChoice> previousRound : previousRounds){
            if(reward.getReward(player,previousRound) > max){
                max = reward.getReward(player,previousRound);
                choice = previousRound.getChoice(player);
            }
        }

        if(choice != null){
            return choice;
        }else {
            return alternate.getChoice(player,previousRounds);
        }
    }

    @Override
    public String toString(){
        return name();
    }
}
